from collections import deque

# Минское метро
MinskSubway = {"КАМЕННАЯ ГОРКА":
                   ["КУНЦАЎШЧЫНА"],
               "КУНЦАЎШЧЫНА":
                   ["КАМЕННАЯ ГОРКА",
                    "СПАРТЫЎНАЯ"],
               "СПАРТЫЎНАЯ":
                   ["КУНЦАЎШЧЫНА",
                    "ПУШКІНСКАЯ"],
               "ПУШКІНСКАЯ":
                   ["СПАРТЫЎНАЯ",
                    "МАЛАДЗЁЖНАЯ"],
               "МАЛАДЗЁЖНАЯ":
                   ["ПУШКІНСКАЯ",
                    "ФРУНЗЕНСКАЯ"],
               "ФРУНЗЕНСКАЯ":
                   ["МАЛАДЗЁЖНАЯ",
                    "НЯМІГА",
                    "ЮБІЛЕЙНАЯ ПЛОШЧА"],
               "НЯМІГА":
                   ["ФРУНЗЕНСКАЯ",
                    "КУПАЛАЎСКАЯ"],
               "КУПАЛАЎСКАЯ":
                   ["НЯМІГА",
                    "ПЕРШАМАЙСКАЯ",
                    "КАСТРЫЧНІЦКАЯ"],
               "ПЕРШАМАЙСКАЯ":
                   ["КУПАЛАЎСКАЯ",
                    "ПРАЛЕТАРСКАЯ"],
               "ПРАЛЕТАРСКАЯ":
                   ["ПЕРШАМАЙСКАЯ",
                    "ТРАКТАРНЫ ЗАВОД"],
               "ТРАКТАРНЫ ЗАВОД":
                   ["ПРАЛЕТАРСКАЯ",
                    "ПАРТЫЗАНСКАЯ"],
               "ПАРТЫЗАНСКАЯ":
                   ["ТРАКТАРНЫ ЗАВОД",
                    "АЎТАЗАВОДСКАЯ"],
               "АЎТАЗАВОДСКАЯ":
                   ["ПАРТЫЗАНСКАЯ",
                    "МАГІЛЁЎСКАЯ"],
               "ЮБІЛЕЙНАЯ ПЛОШЧА":
                   ["ФРУНЗЕНСКАЯ",
                    "ПЛОШЧА ФРАНЦІШКА БАГУШЭВІЧА"],
               "ПЛОШЧА ФРАНЦІШКА БАГУШЭВІЧА":
                   ["ЮБІЛЕЙНАЯ ПЛОШЧА",
                    "ВАКЗАЛЬНАЯ"],
               "ВАКЗАЛЬНАЯ":
                   ["ПЛОШЧА ФРАНЦІШКА БАГУШЭВІЧА",
                    "КАВАЛЬСКАЯ СЛАБАДА"],
               "УРУЧЧА":
                   ["БАРЫСАЎСКІ ТРАКТ"],
               "БАРЫСАЎСКІ ТРАКТ":
                   ["УРУЧЧА",
                    "УСХОД"],
               "УСХОД":
                   ["БАРЫСАЎСКІ ТРАКТ",
                    "МАСКОЎСКАЯ"],
               "МАСКОЎСКАЯ":
                   ["БАРЫСАЎСКІ ТРАКТ",
                    "ПАРК ЧАЛЮСКІНЦАЎ"],
               "ПАРК ЧАЛЮСКІНЦАЎ":
                   ["МАСКОЎСКАЯ",
                    "АКАДЭМІЯ НАВУК"],
               "АКАДЭМІЯ НАВУК":
                   ["ПАРК ЧАЛЮСКІНЦАЎ",
                    "ПЛОШЧА ЯКУБА КОЛАСА"],
               "ПЛОШЧА ЯКУБА КОЛАСА":
                   ["АКАДЭМІЯ НАВУК",
                    "ПЛОШЧА ПЕРАМОГІ"],
               "ПЛОШЧА ПЕРАМОГІ":
                   ["ПЛОШЧА ЯКУБА КОЛАСА",
                    "КАСТРЫЧНІЦКАЯ"],
               "КАСТРЫЧНІЦКАЯ":
                   ["ПЛОШЧА ПЕРАМОГІ",
                    "ПЛОШЧА ЛЕНІНА",
                    "КУПАЛАЎСКАЯ"],
               "ПЛОШЧА ЛЕНІНА":
                   ["КАСТРЫЧНІЦКАЯ",
                    "ІНСТЫТУТ КУЛЬТУРЫ",
                    "ВАКЗАЛЬНАЯ"],
               "ІНСТЫТУТ КУЛЬТУРЫ":
                   ["ПЛОШЧА ЛЕНІНА",
                    "ГРУШАЎКА"],
               "ГРУШАЎКА":
                   ["ІНСТЫТУТ КУЛЬТУРЫ",
                    "МІХАЛОВА"],
               "МІХАЛОВА":
                   ["ГРУШАЎКА",
                    "ПЯТРОЎШЧЫНА"],
               "ПЯТРОЎШЧЫНА":
                   ["МІХАЛОВА",
                    "МАЛІНАЎКА"],
               "МАЛІНАЎКА":
                   ["ПЯТРОЎШЧЫНА"]}


# Функция поиска маршрута
def find_shortest_path(graph, start, end):
    # Инициализация очереди для BFS
    queue = deque()
    queue.append((start, [start]))

    # Пока очередь не пуста
    while queue:
        current_station, path = queue.popleft()

        # Проверка, достигли ли мы конечной станции
        if current_station == end:
            return path

        # Если не достигли, добавляем соседние станции в очередь
        for neighbor_station in graph.get(current_station, []):
            if neighbor_station not in path:
                queue.append((neighbor_station, path + [neighbor_station]))


# Пример поиска маршрута
path = find_shortest_path(MinskSubway, 'МАСКОЎСКАЯ', 'ПЛОШЧА ФРАНЦІШКА БАГУШЭВІЧА')
print(path)
